PofD[,2]<-c(7,0,7,0) # input counts: how to count how many ACGTs?
j<-j+1
}
EffReads<-sum(PofD[,"counts"])#Number of reads that effectively covered p with a non-zero nucleotide incidence
# Calculate the probability of each nucleotide from the data
# in the PofD table and identify undetected nucleotides:
for (i in 1:4) {
PofD[i,3]<-PofD[i,2]/EffReads
if (PofD[i,2]==0) {
PofD[i,4]<-T
}else {
PofD[i,4]<-F
}
i<-i+1
}
PofD # See the table, deactivate when in a loop
# Fill in the PofD table:
for (j in 1:n) {
PofD[,2]<-c(7,0,2,0) # input counts: how to count how many ACGTs?
j<-j+1
}
EffReads<-sum(PofD[,"counts"])#Number of reads that effectively covered p with a non-zero nucleotide incidence
# Calculate the probability of each nucleotide from the data
# in the PofD table and identify undetected nucleotides:
for (i in 1:4) {
PofD[i,3]<-PofD[i,2]/EffReads
if (PofD[i,2]==0) {
PofD[i,4]<-T
}else {
PofD[i,4]<-F
}
i<-i+1
}
PofD # See the table, deactivate when in a loop
# Evaluate the probability distribution and determine the genotype:
if (sum(PofD[,4])==3) {
print("Homozygous")
} else if (sum(PofD[,4])==2) {
if (diff(PofD[which(PofD[,2]!=0),3])==0) {
print("Heterozygous")
}else{
print(paste("Two options:",
PofD[which(PofD[,2]!=0),1],
"with a probability of",PofD[which(PofD[,2]!=0),3]))
#Threshold strategy should go here
}
}else{
print(paste("Inconclusive, best guess is",
PofD[which(PofD[,3]==max(PofD[,3])),1],
"with a probability of", max(PofD[,3])))
}
# Fill in the PofD table:
for (j in 1:n) {
PofD[,2]<-c(7,1,2,0) # input counts: how to count how many ACGTs?
j<-j+1
}
EffReads<-sum(PofD[,"counts"])#Number of reads that effectively covered p with a non-zero nucleotide incidence
# Calculate the probability of each nucleotide from the data
# in the PofD table and identify undetected nucleotides:
for (i in 1:4) {
PofD[i,3]<-PofD[i,2]/EffReads
if (PofD[i,2]==0) {
PofD[i,4]<-T
}else {
PofD[i,4]<-F
}
i<-i+1
}
PofD # See the table, deactivate when in a loop
# Evaluate the probability distribution and determine the genotype:
if (sum(PofD[,4])==3) {
print("Homozygous")
} else if (sum(PofD[,4])==2) {
if (diff(PofD[which(PofD[,2]!=0),3])==0) {
print("Heterozygous")
}else{
print(paste("Two options:",
PofD[which(PofD[,2]!=0),1],
"with a probability of",PofD[which(PofD[,2]!=0),3]))
#Threshold strategy should go here
}
}else{
print(paste("Inconclusive, best guess is",
PofD[which(PofD[,3]==max(PofD[,3])),1],
"with a probability of", max(PofD[,3])))
}
# Fill in the PofD table:
for (j in 1:n) {
PofD[,2]<-c(7,1,7,0) # input counts: how to count how many ACGTs?
j<-j+1
}
EffReads<-sum(PofD[,"counts"])#Number of reads that effectively covered p with a non-zero nucleotide incidence
# Calculate the probability of each nucleotide from the data
# in the PofD table and identify undetected nucleotides:
for (i in 1:4) {
PofD[i,3]<-PofD[i,2]/EffReads
if (PofD[i,2]==0) {
PofD[i,4]<-T
}else {
PofD[i,4]<-F
}
i<-i+1
}
PofD # See the table, deactivate when in a loop
# Evaluate the probability distribution and determine the genotype:
if (sum(PofD[,4])==3) {
print("Homozygous")
} else if (sum(PofD[,4])==2) {
if (diff(PofD[which(PofD[,2]!=0),3])==0) {
print("Heterozygous")
}else{
print(paste("Two options:",
PofD[which(PofD[,2]!=0),1],
"with a probability of",PofD[which(PofD[,2]!=0),3]))
#Threshold strategy should go here
}
}else{
print(paste("Inconclusive (multiallelic), best guess is",
PofD[which(PofD[,3]==max(PofD[,3])),1],
"with a probability of", max(PofD[,3])))
}
PofD
# Fill in the PofD table:
for (j in 1:n) {
PofD[,2]<-c(7,0,2,0) # input counts: how to count how many ACGTs?
j<-j+1
}
EffReads<-sum(PofD[,"counts"])#Number of reads that effectively covered p with a non-zero nucleotide incidence
# Calculate the probability of each nucleotide from the data
# in the PofD table and identify undetected nucleotides:
for (i in 1:4) {
PofD[i,3]<-PofD[i,2]/EffReads
if (PofD[i,2]==0) {
PofD[i,4]<-T
}else {
PofD[i,4]<-F
}
i<-i+1
}
PofD # See the table, deactivate when in a loop
# Evaluate the probability distribution and determine the genotype:
if (sum(PofD[,4])==3) {
print("Homozygous")
} else if (sum(PofD[,4])==2) {
if (diff(PofD[which(PofD[,2]!=0),3])==0) {
print("Heterozygous")
}else{
print(paste("Two options:",
PofD[which(PofD[,2]!=0),1],
"with a probability of",PofD[which(PofD[,2]!=0),3]))
#Threshold strategy should go here
}
}else{
print(paste("Inconclusive (multiallelic), best guess is",
PofD[which(PofD[,3]==max(PofD[,3])),1],
"with a probability of", max(PofD[,3])))
}
diff(PofD[which(PofD[,2]
)
)
diff(PofD[which(PofD[,2]!=0),3])
# Fill in the PofD table:
for (j in 1:n) {
PofD[,2]<-c(7,0,7,0) # input counts: how to count how many ACGTs?
j<-j+1
}
EffReads<-sum(PofD[,"counts"])#Number of reads that effectively covered p with a non-zero nucleotide incidence
# Calculate the probability of each nucleotide from the data
# in the PofD table and identify undetected nucleotides:
for (i in 1:4) {
PofD[i,3]<-PofD[i,2]/EffReads
if (PofD[i,2]==0) {
PofD[i,4]<-T
}else {
PofD[i,4]<-F
}
i<-i+1
}
PofD # See the table, deactivate when in a loop
# Evaluate the probability distribution and determine the genotype:
if (sum(PofD[,4])==3) {
print("Homozygous")
} else if (sum(PofD[,4])==2) {
if (diff(PofD[which(PofD[,2]!=0),3])==0) {
print(paste("Heterozygous:",PofD[which(PofD[,2]!=0),1]))
}else{
print(paste("Two options:",
PofD[which(PofD[,2]!=0),1],
"with a probability of",PofD[which(PofD[,2]!=0),3]))
#Threshold strategy should go here
}
}else{
print(paste("Inconclusive (multiallelic), best guess is",
PofD[which(PofD[,3]==max(PofD[,3])),1],
"with a probability of", max(PofD[,3])))
}
## Define nucleotide position
# p<-4563# Nucleotide position
# Start big for loop that reads one nucleotide position at the time here.
PofD<-data.frame(matrix(0,4,4))
names(PofD) = c("nuc","counts", "probability", "nuc found?")
PofD[,1]<-c("A","C","G","T")
PofD
# Fill in the PofD table:
for (j in 1:n) {
PofD[,2]<-c(7,0,7,0) # input counts:
# count incidences of each nucleotide at position p
# how to count how many ACGTs from the reads data?
j<-j+1
}
PofD
EffReads<-sum(PofD[,"counts"])#Number of reads that effectively covered p with a non-zero nucleotide incidence
# Calculate the probability of each nucleotide from the data
# in the PofD table and identify undetected nucleotides:
for (i in 1:4) {
PofD[i,3]<-PofD[i,2]/EffReads
if (PofD[i,2]==0) {
PofD[i,4]<-F
}else {
PofD[i,4]<-T
}
i<-i+1
}
PofD # See the table, deactivate when in a loop
# Evaluate the probability distribution and determine the genotype:
if (sum(PofD[,4])==1) {
print("Homozygous")
} else if (sum(PofD[,4])==2) {
if (diff(PofD[which(PofD[,2]!=0),3])==0) {
print(paste("Heterozygous:",
PofD[which(PofD[,2]!=0),1]))
}else{
print(paste("Two options:",
PofD[which(PofD[,2]!=0),1],
"with a probability of",
PofD[which(PofD[,2]!=0),3]))
#Threshold strategy should go here
}
}else{
print(paste("Inconclusive (multiallelic), best guess is",
PofD[which(PofD[,3]==max(PofD[,3])),1],
"with a probability of", max(PofD[,3])))
}
# Fill in the PofD table:
for (j in 1:n) {
PofD[,2]<-c(7,0,0,0) # input counts:
# count incidences of each nucleotide at position p
# how to count how many ACGTs from the reads data?
j<-j+1
}
EffReads<-sum(PofD[,"counts"])#Number of reads that effectively covered p with a non-zero nucleotide incidence
n==EffReads # Make sure all reads provide a nucleotide
# Calculate the probability of each nucleotide from the data
# in the PofD table and identify undetected nucleotides:
for (i in 1:4) {
PofD[i,3]<-PofD[i,2]/EffReads
if (PofD[i,2]==0) {
PofD[i,4]<-F
}else {
PofD[i,4]<-T
}
i<-i+1
}
PofD # See the table, deactivate when in a loop
# Evaluate the probability distribution and determine the genotype:
if (sum(PofD[,4])==1) {
print("Homozygous")
} else if (sum(PofD[,4])==2) {
if (diff(PofD[which(PofD[,2]!=0),3])==0) {
print(paste("Heterozygous:",
PofD[which(PofD[,2]!=0),1]))
}else{
print(paste("Two options:",
PofD[which(PofD[,2]!=0),1],
"with a probability of",
PofD[which(PofD[,2]!=0),3]))
#Threshold strategy should go here
}
}else{
print(paste("Inconclusive (multiallelic), best guess is",
PofD[which(PofD[,3]==max(PofD[,3])),1],
"with a probability of", max(PofD[,3])))
}
# Fill in the PofD table:
for (j in 1:n) {
PofD[,2]<-c(7,2,1,0) # input counts:
# count incidences of each nucleotide at position p
# how to count how many ACGTs from the reads data?
j<-j+1
}
EffReads<-sum(PofD[,"counts"])#Number of reads that effectively covered p with a non-zero nucleotide incidence
n==EffReads # Make sure all reads provide a nucleotide
# Calculate the probability of each nucleotide from the data
# in the PofD table and identify undetected nucleotides:
for (i in 1:4) {
PofD[i,3]<-PofD[i,2]/EffReads
if (PofD[i,2]==0) {
PofD[i,4]<-F
}else {
PofD[i,4]<-T
}
i<-i+1
}
PofD # See the table, deactivate when in a loop
# Evaluate the probability distribution and determine the genotype:
if (sum(PofD[,4])==1) {
print("Homozygous")
} else if (sum(PofD[,4])==2) {
if (diff(PofD[which(PofD[,2]!=0),3])==0) {
print(paste("Heterozygous:",
PofD[which(PofD[,2]!=0),1]))
}else{
print(paste("Two options:",
PofD[which(PofD[,2]!=0),1],
"with a probability of",
PofD[which(PofD[,2]!=0),3]))
#Threshold strategy should go here
}
}else{
print(paste("Inconclusive (multiallelic), best guess is",
PofD[which(PofD[,3]==max(PofD[,3])),1],
"with a probability of", max(PofD[,3])))
}
# Fill in the PofD table:
for (j in 1:n) {
PofD[,2]<-c(7,7,0,0) # input counts:
# count incidences of each nucleotide at position p
# how to count how many ACGTs from the reads data?
j<-j+1
}
EffReads<-sum(PofD[,"counts"])#Number of reads that effectively covered p with a non-zero nucleotide incidence
# Calculate the probability of each nucleotide from the data
# in the PofD table and identify undetected nucleotides:
for (i in 1:4) {
PofD[i,3]<-PofD[i,2]/EffReads
if (PofD[i,2]==0) {
PofD[i,4]<-F
}else {
PofD[i,4]<-T
}
i<-i+1
}
PofD # See the table, deactivate when in a loop
# Evaluate the probability distribution and determine the genotype:
if (sum(PofD[,4])==1) {
print("Homozygous")
} else if (sum(PofD[,4])==2) {
if (diff(PofD[which(PofD[,2]!=0),3])==0) {
print(paste("Heterozygous:",
PofD[which(PofD[,2]!=0),1]))
}else{
print(paste("Two options:",
PofD[which(PofD[,2]!=0),1],
"with a probability of",
PofD[which(PofD[,2]!=0),3]))
#Threshold strategy should go here
}
}else{
print(paste("Inconclusive (multiallelic), best guess is",
PofD[which(PofD[,3]==max(PofD[,3])),1],
"with a probability of", max(PofD[,3])))
}
PofD[which(PofD[,2]!=0
)
)
PofD[which(PofD[,2]!=0),1])
PofD[which(PofD[,2]!=0),1]
# Create G table
G<-data.frame(matrix(0,4,4))
PofD # See the table, deactivate when in a loop
# Create G table
G<-data.frame(matrix(0,4,4))
names(G) = c("A","C","G","T")
G[,1]<-c("A","C","G","T")
G
# Create G table
G<-data.frame(matrix(0,4,4))
names(G) = c("A","C","G","T")
G
sum(G)==1
G[1,1] = 1
G
sum(G)==1
which(PofD[,2]!=0)
PofD[which(PofD[,2]!=0),1])
PofD[which(PofD[,2]!=0),1]
PofD
# Calculate the probability of each nucleotide from the data
# in the PofD table and identify undetected nucleotides:
for (i in 1:4) {
PofD[i,3]<-PofD[i,2]/EffReads
if (PofD[i,2]==0) {
PofD[i,4]<-F
}else {
PofD[i,4]<-T
}
i<-i+1
}
PofD # See the table, deactivate when in a loop
# Evaluate the probability distribution and determine the genotype:
if (sum(PofD[,4])==1) {
print("Homozygous")
} else if (sum(PofD[,4])==2) {
if (diff(PofD[which(PofD[,2]!=0),3])==0) {
print(paste("Heterozygous:",
PofD[which(PofD[,2]!=0),1]))
G[which(PofD[,2]!=0),]<-PofD[which(PofD[,2]!=0),3]
}else{
print(paste("Two options:",
PofD[which(PofD[,2]!=0),1],
"with a probability of",
PofD[which(PofD[,2]!=0),3]))
#Threshold strategy should go here
}
}else{
print(paste("Inconclusive (multiallelic), best guess is",
PofD[which(PofD[,3]==max(PofD[,3])),1],
"with a probability of", max(PofD[,3])))
}
G
# Evaluate the probability distribution and determine the genotype:
if (sum(PofD[,4])==1) {
print("Homozygous")
} else if (sum(PofD[,4])==2) {
if (diff(PofD[which(PofD[,2]!=0),3])==0) {
print(paste("Heterozygous:",
PofD[which(PofD[,2]!=0),1]))
G[which(PofD[,2]!=0),]<-(PofD[which(PofD[,2]!=0),3])/4
}else{
print(paste("Two options:",
PofD[which(PofD[,2]!=0),1],
"with a probability of",
PofD[which(PofD[,2]!=0),3]))
#Threshold strategy should go here
}
}else{
print(paste("Inconclusive (multiallelic), best guess is",
PofD[which(PofD[,3]==max(PofD[,3])),1],
"with a probability of", max(PofD[,3])))
}
G
sum(G)==1
which(PofD[,2]!=0)
PofD[which(PofD[,2]!=0),1][1]
which(PofD[,2]!=0)
which(PofD[,2]!=0)[1]
# Evaluate the probability distribution and determine the genotype:
if (sum(PofD[,4])==1) {
print("Homozygous")
} else if (sum(PofD[,4])==2) {
if (diff(PofD[which(PofD[,2]!=0),3])==0) {
print(paste("Heterozygous:",
PofD[which(PofD[,2]!=0),1]))
G[which(PofD[,2]!=0),which(PofD[,2]!=0)[1]]<-(PofD[which(PofD[,2]!=0),3])/4
}else{
print(paste("Two options:",
PofD[which(PofD[,2]!=0),1],
"with a probability of",
PofD[which(PofD[,2]!=0),3]))
#Threshold strategy should go here
}
}else{
print(paste("Inconclusive (multiallelic), best guess is",
PofD[which(PofD[,3]==max(PofD[,3])),1],
"with a probability of", max(PofD[,3])))
}
## Pr(G) ####
G
which(PofD[,2]!=0)
G[which(PofD[,2]!=0)[1],which(PofD[,2]!=0)[1]]<-(PofD[which(PofD[,2]!=0),3])/4
## Pr(G) ####
G[2:4,1]
G
G
## Pr(G) ####
G[2:4,1] = 0
G[3:4,2] = 0
G[4,3] = 0
sum(G)==1
G
which(PofD[,2]!=0)
Alele<-which(PofD[,2]!=0)
Alele
Alele[2]
PofD[Alele[1]]
PofD
PofD[3,Alele[1]]
Allele[2]
Alele<-which(PofD[,2]!=0)
Allele[2]
Alele<-which(PofD[,2]!=0)
Alele[2]
PofD[which(PofD[,2]!=0),3])
PofD[which(PofD[,2]!=0),3]
PofD[which(PofD[,2]!=0),3][2]
G
# Create G table
G<-data.frame(matrix(0,4,4))
G[Alele[1],]<-(PofD[which(PofD[,2]!=0),3][1])/4
G
G[,Alele[2]]<-G+(PofD[which(PofD[,2]!=0),3][2])/4
G[,Alele[2]]
G
## Pr(G) ####
G[2:4,1] = 0
G[3:4,2] = 0
G[4,3] = 0
sum(G)==1
G
G[Alele[1],]<-(PofD[which(PofD[,2]!=0),3][1])/4
G[,Alele[2]]<-G+(PofD[which(PofD[,2]!=0),3][2])/4
sum(G)==1
